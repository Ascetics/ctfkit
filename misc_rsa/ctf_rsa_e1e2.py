# -*- coding:utf8 -*-
"""
共模攻击就是使用两个及以上的公钥来加密同一条信息 c1=pow(m, e1, n) c2=pow(m, e2, n)
结论
gcd(e1, e2)=e1*s1+e2*s2 那么有 pow(c1, s1)*pow(c2, s2) % n = pow(m, gcd(e1, e2))
"""

# import libnum
import gmpy2

e1e2 = 151931
n = 84130325462189313261610613840200969686006974931596752912032790684163259588936598567112333205675376575653349699558006190805236048677612743149161267856067749658721310907290563192651822456436162893862332677601389286823850869861627186339695681127691895146627792056779915527655786135390557374522354125691160967603061917013801283769106284129418217154101973930260335807437308795976093605719570668187252953377241106277131154146406710208553604162789827629653779259160590959887598160617569785797679836749435646510582655971711741029417262291445133694164402046308899620645557434194447055229215374986345090010304045839732593934047238792984259915694506040189791018542812674501957158976683553103670916884578330339754410985060529044158920150117253712701573184005911278916381934132179281549735149623256759896156546668842438913581742577907775289270627635194061377904271075235797938643630177588509680531035491329021958784461639411836887676505524012023437950803999811659244823170086524422112788479235025578274269284102996813609639046143942802445958501781726534600684331272113138000127764573457550116220984423875964403470300541258257779535477443662855528497647534458034753495233962850546196096902356580597
c1 = 5526981843577863694461841818351673890485198991567434658436770623490360611171871127510696277931234016151166487845669008158730860791187426804659014070306342599593203461644344063671060608024741125863151160681737760825655904785410788429923395448479309181146271656243865686872360070862425446306804455143460283097489937460681185667889651996340602549406246983404553712950903106202637657545318838234089563006281413871664984932655309786145062824775367490677358018047724375137646853089100636910706417957472451511189929270830461215635563336097943145813465687418167325953057560920557811037396525599283369527238547590099431770150410613446367215565152850675941768614103145735526747937173171095406355478150520086157783786157233800132640165602216366493748584897917370650633605868739552901472918463967537246747239034849801736709740501078016729820001908860255554244761014914173396258591186967052039240422376770977181833478209734238146312802796726420114480881217425132382900982749982633798649678323928534549057994366138023265799921199669695092069367137971097924101068016233987031053592978291709434171339215459621867307522559994943572193872611134462980500249831546682238789659886548296132550808672970975
c2 = 34084270081687215738807305215251787451638821299044014914682531967321866632121742567116108518795723102917357389974357667834615280184350852689416055137489247144479830563666110553634856291420207301164541339536763839450977561693676245102910452394708665923322529405310574606327895930541878192148924940959431781480647857477703953124323177425707471323985717664697755487011012344887464332487662104362515163201720826713950129753029845783245282363456550757104613456683996197339839069797091412545873164972661844751681352702261084660646346044820936686595737245383217501391011213177128366315025981912576190042188565795126552888941891222878512876415813788639279098423252518562584392383828846310597706984192183323459131536957686029489643645530071134644693970419530213624757323611027399502740215831349835885291912029119606235799410070446960489470382325032756908742170024039020096953892876059066875780052077940300335448034160045048020007407018279790936847112516378129875607582306514635993448576932928782939218669424318874692862402344461024076485525660329526521172000498582344032675985278644197734558735991092983701763358607940473927824852544744622220580239511275435637081454423079295014742864719778127


def rsa_gong_N_def(e1, e2, c1, c2, n):  # 共模攻击函数
    e1, e2, c1, c2, n = int(e1), int(e2), int(c1), int(c2), int(n)
    print("e1,e2:", e1, e2)
    s = gmpy2.gcdext(e1, e2)
    print("mpz:", s)
    s1 = s[1]
    s2 = s[2]
    if s1 < 0:
        s1 = - s1
        c1 = gmpy2.invert(c1, n)
    elif s2 < 0:
        s2 = - s2
        c2 = gmpy2.invert(c2, n)
    m = (pow(c1, s1, n) * pow(c2, s2, n)) % n
    return int(m)


def de(c, e, n):  # 因为此时的m不是真正的m，而是m^k，所以对m^k进行爆破
    k = 0
    while k < 1000:  # 指定k小于1000
        mk = c + n * k
        # 返回的第一个数值为开方数，第二个数值为布尔型，可整除为true，可自行测试
        flag, true1 = gmpy2.iroot(mk, e)
        if True == true1:
            # print(libnum.n2s(int(flag)))
            return flag
        k += 1


def i2s(i):
    length = len(str(hex(i)).replace('0x', ''))
    length = length // 2 + length % 2
    b = (i).to_bytes(length, 'big')
    try:
        s = b.decode('ascii')
        return s
    except:
        return None


for e1 in range(2, e1e2):
    if e1e2 % e1 == 0:  # 爆破可整除的e
        e2 = e1e2 // e1
        c = rsa_gong_N_def(e1, e2, c1, c2, n)
        e = gmpy2.gcd(e1, e2)
        m1 = de(c, e, n)
        if m1:  # 指定输出m1
            # 可以使用libnum.n2s把m1转换成字符串，也可以使用自己写的i2s，print(libnum.n2s(int(m1)))
            # m1 = 13040004482825621020299718708493757526231130069031398679622047997097305186529331218280047229
            print(i2s(int(m1)))